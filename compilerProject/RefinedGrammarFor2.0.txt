<program> --> <instruction_list>

<instructionList> --> <instruction>;
					| <instruction>;<instructionList>

<instruction> --> <declaration>
				| <attribution>
				| <if_struct>
				| <looper>
				| <comment>
				| <for>
				| <scan>
				| <print>
				| <function>
				| <call_function>
				| <return>
				| <continue>
				| <break>
				| <fprint>
				| <fscan>
				| <dowhile>
				| <while>
				| <fscanEnder>
				| <fscanSize> 



<function> --> <type_identifier> <function_name>(<params>).Do(<instructionList>)

<return> --> Exit(<var>)
			| Exit()

<break> --> Break()
			|BreakIf(<bool>)

<continue> --> Continue()
			|ContinueIf(<bool>)

<function_name> --> <letterBig><word>

<call_function> --> F.<function_name>(<params_call>)

<params> --> <type_identifier> <var>
			| <type_identifier> <var>, <params> 

<params_call> -->  <exp>
			| <exp>, <params_call> 

<fprint> --> On.File(<string>,<string>,<mode>)
		| OnF(<string>,<string>,<mode>)

<mode> --> "W" | "A" | "w" | "a"

<fscan> --> In.File(<string>,<number>)
		| InF(<string>,<number>)

<fscanEnder> --> In.FileEnder(<string>)

<fscanSize> --> In.FileSize(<string>,<number>)

<scan> --> In.Console()
		| InCon()

<print> --> On.Console(<string>)
		| OnCon(<string>)

<declaration> --> <type_identifier> <declareExpr>

<declareExpr> --> <var>
				| <attribution>
				| <declareExpr>,<declareExpr>

<attribution> --> <var> << <exp>
				| <var> Equals <exp>
				| <var> -> <exp>
				| Equals(<var>,<exp>)

<looper> --> Loop(<number>).Do(<instructionList>)

<comment> --> Comment(<ascii_word>)
			| Com(<ascii_word>)
			| Todo(<ascii_word>)
			| Fix(<ascii_word>)

<for> --> For(<idn_number> <var> = <signed_number>).Step(<signed_number>).If(<bool>).Do(<instructionList>)

<while> --> While(<bool>).Do(<instructionList>)

<dowhile> --> Do(<instructionList>).While(<bool>)

<if_struct> --> If(<bool>).Then(<instructionList>)
			| If(<bool>).Then(<instructionList>).Else(<instructionList>)

<exp> --> <exp> + <term>
		| <exp> - <term>
		| Add(<exp> , <term>)
		| Sub(<exp> , <term>)
		| <term>

<term> --> <term> * <factor>
		| <term> / <factor>
		| <term> % <factor>
		| Mul(<term>,<factor>)
		| Div(<term>,<factor>)
		| Mod(<term>,<factor>)
		| <factor>

<factor> --> (<exp>)
			| <var>
			| <number_type>
			| <decimal>
			| <string>
			| <char>
			| <call_function>
			 
<bool> --> <exp> < <exp>
		| <exp> > <exp>
		| <exp> >= <exp>
		| <exp> <= <exp>
		| <exp> == <exp>
		| !(<bool>)
		| (<bool>)
		| <bool> && <bool>
		| <bool> || <bool>
		| Xor(<bool>,<bool>)
		| And(<bool>,<bool>)
		| Or(<bool>,<bool>)
		| Not(<bool>)
		| True
		| False
		| <Bcasting>

<char> --> '<ascii>'
		| <Ccasting>
		| <charindex>

<string> --> "<ascii_word>"
			| <Scasting>
			| <scan>
			| <fscan>
			
<type_identifier> --> <idn_decimal>
					| <idn_number>
					| <idn_char>
					| <idn_string>
					| <idn_bool>
					| <idn_void>

<casting> --> <Scasting>
			| <Dcasting>
			| <Ncasting>
			| <Ccasting>
			| <Bcasting>

<sringLength> --> <string>.toLength()
				| <var>.toLength()

<charindex> --> <string>.fromIndex(<number>)
			| <var>.fromIndex(<number>)

<Scasting> --> <var>.toString()
			| <scan>.toString()
			| <fscan>.toString()
			
<Dcasting> --> <var>.toDecimal()
			| <scan>.toDecimal()
			| <fscan>.toDecimal()
			
<Ncasting> --> <var>.toNumber()
			| <scan>.toNumber()
			| <fscan>.toNumber()
			
<Ccasting> --> <var>.toChar()
			| <scan>.toChar()
			| <fscan>.toChar()

<Bcasting> --> <var>.toBool()
			| <scan>.toBool()
			| <fscan>.toBool()

<idn_decimal> --> D
<idn_number> --> N
<idn_char> --> C
<idn_string> --> S(<number>)
<idn_bool> --> B
<idn_void> --> V

<var> --> <letter><word>
		|<letter>

<ascii_word> --> <ascii>
			| <ascii><ascii_word>

<word> --> <letter>
		|<number>
		|<letterBig>
		|<letter><word>
		|<letterBig><word>
		|<number><word>

<decimal> --> <signed_number>.<number>
			| .<number>
			| +.<number>
			| -.<number>
			| <Dcasting>

<number_type> --> <Ncasting>
				| <signed_number>
				| <fscanEnder>
				| <fscanSize>

<signed_number> --> +<number>
				| -<number>
				| <number>

<number> --> 0...9 
		|<number><number>

<ascii> --> TAB...~

<letter> --> a...z

<letterBig> --> A...Z
