<instructionList> --> <instruction>;EOF
					| <instruction>;<instructionList>

<instruction> -- > <declaration>
			| <attribution>
			| <if_struct>
			| <looper>
			| <comment>
			| <for>
			| <call_function>
			| <exit>
			| <continue>
			| <continueif>
			| <break>
			| <breakif>
			| <in>
			| <on>
			| EOF
<if_struct> --> If(<bool>).Then(<instructionList>)
			  | If(<bool>).Then(<instructionList>).Else(<instructionList>)

<looper> --> Loop(<exp>).Do(<instructionList>)
<for> --> For(<attribution>).Step(<exp>).If(<bexp>).Do(<instructionList>) 

<exit> --> Exit(<bexp>)
			| Exit()

<continue> --> Continue()
<continueif> -->ContinueIf(<bexp>)
<breakif> --> BreakIf(<bexp>)
<break> --> Break()

<in> --> <fscan>
		| <scan>
		| <fscanEnder>
		| <fscanSize>

<fscan> --> In.File(<exp>,<exp>)

<fscanEnder> --> In.FileEnder(<exp>) 

<fscanSize> --> In.FileSize(<exp>,<exp>)

<scan> --> In.Console()

<in> --> <in>.toString()
<in> --> <in>.toDecimal()
<in> --> <in>.toNumber()
<in> --> <in>.toChar()
<in> --> <in>.toBool()

<on> --> <fprint>
			|<print>
<fprint> --> On.File(<exp>,<exp>,<mode>,<bexp>)  //filename, numberofline(ifin append adds to the end of the line), mode, stringtowrite
<print> --> On.Console(<bexp>)
<mode> --> "W" | "A" | "w" | "a"


<params> --> <type_identifier> <var>
			| <type_identifier> <var>, <params>
			

<bexp> -->  !(<bexp>)
		| <cexp>
		| True
		| False
		| True & <bexp>
		| True | <bexp>
		| True X <bexp>
		| False & <bexp>
		| False | <bexp>
		| False X <bexp>
		| <cexp> & <bexp>
		| <cexp> | <bexp>
		| <cexp> X <bexp>
		| !(<bexp>) & <bexp>
		| !(<bexp>) | <bexp>
		| !(<bexp>) X <bexp>
<cexp> --> <exp> < <exp>
		| <exp> > <exp>
		| <exp> >= <exp>
		| <exp> <= <exp>
		| <exp> = <exp>
		| <exp> != <exp>
		| <exp>
		
<declaration> --> <type_identifier> <declareExpr>
				| <type_identifier> <functionDec>
				| <type_identifier><array_def> <declareExpr>
				| <type_identifier><array_def> <functionDec>
				
<functionDec> -- > <function_name>(<params>).Do(<instructionList>)
	<functionDec> -- > <function_name>().Do(<instructionList>)
	
<declareExpr> --> <var>
						| <var> << <bexp>
						| <declareExpr>,<declareExpr>
		
<attribution> --> <var> << <bexp>

<type_identifier> --> <idn_decimal>
					| <idn_number>
					| <idn_char>
					| <idn_array>
					| <idn_bool>
					| <idn_void>

<call_function> --> F.<function_name>(<params_call>)
				| F.<function_name>()
				
<params_call> -->  <bexp>
			| <bexp>, <params_call>
			
<exp> --> <term> + <exp>
				| <term> - <exp>
				| <term>
<term> -- > <factor> * <term>
				| <factor> / <term>
				| <factor> % <term>
				| <factor>
				
<factor> -- > (<bexp>)
			| <var>
			| <var>[<number>]
			| +<number>
			| -<number>
			| +<decimal>
			| -<decimal>
			| <number>
			| <decimal>
			| <string>
			| <char>
			| <in>
			| <call_function>
			| <casting>
			| <arrayexp>
			
<idn_decimal> --> D
<idn_number> --> N
<idn_char> --> C
<idn_string> --> S[<number>]  //missing
<idn_bool> --> B
<idn_void> --> V
<idn_array> --> <idn_decimal>[<number>]  //missing
					| <idn_number>[<number>]  //missing
					| <idn_char>[<number>]  //missing
					| <idn_string>  //missing
					| <idn_bool>[<number>]  //missing

<var> --> <letter><word>
		| <letter>
		| <var>[<number>]  //missing
<ascii_word> --> <ascii>
			| <ascii><ascii_word>
<word> --> <letter>
		|<number>
		|<letterBig>
		|<letter><word>
		|<letterBig><word>
		|<number><word>

<decimal> --> <signed_number>.<number>
			| .<number>
			| +.<number>
			| -.<number>
			| <Dcasting>  //missing

<number_type> --> <Ncasting>  //missing
				| <signed_number>

<signed_number> --> +<number>
				| -<number>
				| <number>

<number> --> 0...9 
		|<number><number>
		| <fscanEnder>
		| <fscanSize>

<ascii> --> TAB...~

<letter> --> a...z

<letterBig> --> A...Z
<casting> --> ToString(<bexp>)
<casting> --> ToDecimal(<bexp>)
<casting> --> ToNumber(<bexp>)
<casting> --> ToChar(<bexp>)
<casting> --> ToBool(<bexp>)


<char> --> '\(EscapedChar)'
<char> --> '(Char)'