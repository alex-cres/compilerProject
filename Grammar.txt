<instructionList> --> <instruction>;EOF
					| <instruction>;<instructionList>

<instruction> -- > <declaration>
		| <attribution>
		| <if_struct>
		| <looper> 
		| <comment>
		| <for> 
		| <call_function>
		| <exit> 
		| <continue>
		| <continueif>
		| <break> 
		| <breakif>
		| <in>
		| <on>
		| EOF 

<in> --> <fscan> //missing
			| <scan> //missing
			| <fscanEnder> //missing
			| <fscanSize> //missing

<fscan> --> In.File(<exp>,<number>)  //missing

<fscanEnder> --> In.FileEnder(<exp>) //missing

<fscanSize> --> In.FileSize(<exp>,<number>) //missing

<scan> --> In.Console() //missing

<on> --> <fprint> //missing
			|<print> //missing

			
<fprint> --> On.File(<exp>,<exp>,<mode>,<exp>)  //missing
 
<mode> --> "W" | "A" | "w" | "a"  //missing

			


<declaration> --> <type_identifier> <declareExpr> //done
				| <type_identifier> <functionDec>  //done
					
<functionDec> -- > <function_name>(<params>).Do(<instructionList>) //done
<functionDec> -- > <function_name>().Do(<instructionList>)  //done

<declareExpr> --> <var>  //done
				| <var> << <exp>  //done
				| <declareExpr>,<declareExpr>  //done


<exit> --> Exit(<var>) //missing
			| Exit() //missing

<break> --> Break() //missing
<breakif> --> BreakIf(<boolstruct>) //missing

<continue> --> Continue() //missing
<continueif> -->ContinueIf(<boolstruct>) //missing

<function_name> --> <letterBig><word> //done

<call_function> --> F.<function_name>(<params_call>) //done
				| F.<function_name>() //done

<params> --> <type_identifier> <var> //done
			| <type_identifier> <var>, <params>  //done

<params_call> -->  <exp> //done
			| <exp>, <params_call>  //done		

<print> --> On.Console(<exp>) //missing
		

<attribution> --> <var> << <exp>   //done
				

<looper> --> Loop(<number>).Do(<instructionList>) //missing
		

<comment> --> Comment(<ascii_word>)  //done
			| Todo(<ascii_word>)  //done
			| Fix(<ascii_word>)  //done

<for> --> For(<idn_number> <attribution>).Step(<signed_number>).If(<bool>).Do(<instructionList>)  //missing

<if_struct> --> If(<bool>).Then(<instructionList>)  //done
			  | If(<bool>).Then(<instructionList>).Else(<instructionList>) //done

<exp> --> <term> + <term> //done
		| <term> - <term> //done
		| <term> //done

<term> --> <factor> * <factor> //done
		| <factor> / <factor> //done
		| <factor> % <factor> //done
		| <factor> //done

<factor> -- > (<exp>) //done
			| <var> //done
			| +<number> //done
			| -<number> //done
			| +<decimal> //done
			| -<decimal> //done
			| <number> //done
			| <decimal> //done
			| <string> //done
			| <char> //done
			| <boolstruct> //done
			| <call_function> //done
		

<boolstruct> -->  !(<boolstruct>) //done
		| (<boolstruct>) //done
		| <boolexp> //done
		| <boolstruct> & <boolstruct> //done
		| <boolstruct> | <boolstruct> //done
		| <boolstruct> X <boolstruct> //done
		| True //done
		| False //done

<boolexp> --> <exp> < <exp> //done
		| <exp> > <exp> //done
		| <exp> >= <exp> //done
		| <exp> <= <exp> //done
		| <exp> = <exp> //done
		| <exp> != <exp> //done
		| <exp>

<char> --> '<ascii>' //done
		| 

<string> --> "<ascii_word>"  //done
		
			
		
<type_identifier> --> <idn_decimal>
					| <idn_number>
					| <idn_char>
					| <idn_array>
					| <idn_bool>
					| <idn_void>

<casting> --> <Scasting> //missing
			| <Dcasting> //missing
			| <Ncasting> //missing
			| <Ccasting> //missing
			| <Bcasting> //missing

<Scasting> --> toString(<exp>)  //missing
			| <in>.toString()  //missing
			 
<Dcasting> --> toDecimal(<exp>)  //missing
			| <in>.toDecimal()  //missing
			
<Ncasting> --> toNumber(<exp>)  //missing
			| <in>.toNumber()  //missing
			
<Ccasting> --> toChar(<exp>)  //missing
			| <in>.toChar()  //missing
			
<Bcasting> --> toBool(<exp>)  //missing
			| <in>.toBool()  //missing

<idn_decimal> --> D
<idn_number> --> N
<idn_char> --> C
<idn_string> --> S[<number>]  //missing
<idn_bool> --> B
<idn_void> --> V
<idn_array> --> <idn_decimal>[<number>]  //missing
					| <idn_number>[<number>]  //missing
					| <idn_char>[<number>]  //missing
					| <idn_string>  //missing
					| <idn_bool>[<number>]  //missing

<var> --> <letter><word>
		| <letter>
		| <var>[<number>]  //missing

<ascii_word> --> <ascii>
			| <ascii><ascii_word>

<word> --> <letter>
		|<number>
		|<letterBig>
		|<letter><word>
		|<letterBig><word>
		|<number><word>

<decimal> --> <signed_number>.<number>
			| .<number>
			| +.<number>
			| -.<number>
			| <Dcasting>  //missing

<number_type> --> <Ncasting>  //missing
				| <signed_number>

<signed_number> --> +<number>
				| -<number>
				| <number>

<number> --> 0...9 
		|<number><number>
		| <fscanEnder>
		| <fscanSize>

<ascii> --> TAB...~

<letter> --> a...z

<letterBig> --> A...Z
