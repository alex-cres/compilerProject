
READING FROM : Code.cx
WRITING TO : Code.cx_logFile.txt

Token:	012 --> IDN_NUMBER                    	Lex:	N
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	a
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	2
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	a
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	035 --> OP_MOD                        	Lex:	%
Exiting <FACTOR>
Token:	018 --> LITERAL_NUMBER                	Lex:	2
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	a
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	035 --> OP_MOD                        	Lex:	%
Exiting <FACTOR>
Token:	018 --> LITERAL_NUMBER                	Lex:	2
Entering <TERM>
Entering <FACTOR>
Token:	040 --> OP_EQUAL                      	Lex:	=
Exiting <FACTOR>
Exiting <TERM>
Exiting <TERM>
Exiting <EXP>
Token:	018 --> LITERAL_NUMBER                	Lex:	0
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"a%2 is 0"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	004 --> POINT                         	Lex:	.
Token:	074 --> RESERVED_ELSE                 	Lex:	Else
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"a%2 is 1"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	-01 --> EOF                           	Lex:	EOF
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>

MAX_DEPTH_TREE FOUND : 15
PROGRAM
|_INSTRUCTIONLIST
  |-INSTRUCTION
  | |_DECLARATION
  |   |-N
  |   |_DECLAREEXP
  |     |-a
  |     |-<<
  |     |_BEXP
  |       |_CEXP
  |         |_EXP
  |           |_TERM
  |             |_FACTOR
  |               |_2
  |-;
  |_INSTRUCTIONLIST
    |-INSTRUCTION
    | |_ON
    |   |-On
    |   |-.
    |   |-Console
    |   |-(
    |   |-BEXP
    |   | |_CEXP
    |   |   |_EXP
    |   |     |_TERM
    |   |       |-FACTOR
    |   |       | |_a
    |   |       |-%
    |   |       |_TERM
    |   |         |_FACTOR
    |   |           |_2
    |   |_)
    |-;
    |_INSTRUCTIONLIST
      |-INSTRUCTION
      | |_IF
      |   |-If
      |   |-(
      |   |-BEXP
      |   | |_CEXP
      |   |   |-EXP
      |   |   | |_TERM
      |   |   |   |-FACTOR
      |   |   |   | |_a
      |   |   |   |-%
      |   |   |   |_TERM
      |   |   |     |_FACTOR
      |   |   |       |_2
      |   |   |-=
      |   |   |_EXP
      |   |     |_TERM
      |   |       |_FACTOR
      |   |         |_0
      |   |-)
      |   |-.
      |   |-Then
      |   | |-(
      |   | |-INSTRUCTIONLIST
      |   | | |-INSTRUCTION
      |   | | | |_ON
      |   | | |   |-On
      |   | | |   |-.
      |   | | |   |-Console
      |   | | |   |-(
      |   | | |   |-BEXP
      |   | | |   | |_CEXP
      |   | | |   |   |_EXP
      |   | | |   |     |_TERM
      |   | | |   |       |_FACTOR
      |   | | |   |         |_"a%2 is 0"
      |   | | |   |_)
      |   | | |_;
      |   | |_)
      |   |-.
      |   |_Else
      |     |-(
      |     |-INSTRUCTIONLIST
      |     | |-INSTRUCTION
      |     | | |_ON
      |     | |   |-On
      |     | |   |-.
      |     | |   |-Console
      |     | |   |-(
      |     | |   |-BEXP
      |     | |   | |_CEXP
      |     | |   |   |_EXP
      |     | |   |     |_TERM
      |     | |   |       |_FACTOR
      |     | |   |         |_"a%2 is 1"
      |     | |   |_)
      |     | |_;
      |     |_)
      |-;
      |_EOF
Entering PROGRAM
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering N
Exiting N
Entering DECLAREEXP
Entering a
Exiting a
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering a
Exiting a
Exiting a
Entering %
Exiting %
Entering TERM
Entering FACTOR
Entering 2
Exiting 2
Exiting 2
Exiting 2
Exiting %
Exiting %
Exiting %
Exiting %
Entering )
Exiting On
Exiting On
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering a
Exiting a
Exiting a
Entering %
Exiting %
Entering TERM
Entering FACTOR
Entering 2
Exiting 2
Exiting 2
Exiting 2
Exiting %
Exiting %
Entering =
Exiting =
Entering EXP
Entering TERM
Entering FACTOR
Entering 0
Exiting 0
Exiting 0
Exiting 0
Exiting 0
Exiting =
Exiting =
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "a%2 is 0"
Exiting a%2 is 0
Exiting a%2 is 0
Exiting a%2 is 0
Exiting a%2 is 0
Exiting a%2 is 0
Exiting a%2 is 0
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Entering .
Entering Else
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "a%2 is 1"
Exiting a%2 is 1
Exiting a%2 is 1
Exiting a%2 is 1
Exiting a%2 is 1
Exiting a%2 is 1
Exiting a%2 is 1
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Else
Exiting If
Exiting If
Entering ;
Entering EOF
Exiting If
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-N
| |_<<
|   |-a
|   |_2
|_INSTRUCTIONLIST
  |-On
  | |-Console
  | |_%
  |   |-a
  |   |_2
  |_If
    |-=
    | |-%
    | | |-a
    | | |_2
    | |_0
    |-Then
    | |_On
    |   |-Console
    |   |_a%2 is 0
    |_Else
      |_On
        |-Console
        |_a%2 is 1
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of N
Optimization start N
End Optimization of N
Optimization of <<
Optimization of a
Optimization start a
End Optimization of a
Optimization of 2
Optimization start 2
End Optimization of 2
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of %
Optimization of a
Optimization start a
End Optimization of a
Optimization of 2
Optimization start 2
End Optimization of 2
Optimization start %
Optimization result %
End Optimization of %
Optimization start On
End Optimization of On
Optimization of If
Optimization of =
Optimization of %
Optimization of a
Optimization start a
End Optimization of a
Optimization of 2
Optimization start 2
End Optimization of 2
Optimization start %
Optimization result %
End Optimization of %
Optimization of 0
Optimization start 0
End Optimization of 0
Optimization start =
Optimization result =
End Optimization of =
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of a%2 is 0
Optimization start a%2 is 0
End Optimization of a%2 is 0
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization of Else
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of a%2 is 1
Optimization start a%2 is 1
End Optimization of a%2 is 1
Optimization start On
End Optimization of On
Optimization start Else
End Optimization of Else
Optimization start If
End Optimization of If
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-N
| |_<<
|   |-a
|   |_2
|_INSTRUCTIONLIST
  |-On
  | |-Console
  | |_%
  |   |-a
  |   |_2
  |_If
    |-=
    | |-%
    | | |-a
    | | |_2
    | |_0
    |-Then
    | |_On
    |   |-Console
    |   |_a%2 is 0
    |_Else
      |_On
        |-Console
        |_a%2 is 1
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 12 	 | DECLARATION 	 | a
		mov eax, 2
		mov dword[a], eax

	a : dd 0
		mov edx, 0
		mov eax, dword[a] ; Moving Second Operand Number Var
		mov ebx, 2 ; Moving First Operand Number
		idiv ebx ; Dividing First and Second Operand Number
		mov dword[t1] , edx ;Result 

		push dword[t1]
		push formatoutnumber; push message into ESP
		call _printf; call defined function
		add esp, 8; params * 4

		mov edx, 0
		mov eax, dword[a] ; Moving Second Operand Number Var
		mov ebx, 2 ; Moving First Operand Number
		idiv ebx ; Dividing First and Second Operand Number
		mov dword[t2] , edx ;Result 

		mov eax, dword[t2]
	t3 : dd 0
		mov ebx, dword[t3]
	t4 : dd 0
		cmp eax, ebx
		je	t4_true
		mov eax,FALSE
		mov dword[t4],eax
		jmp t4_false
		t4_true:
		mov eax,TRUE
		mov dword[t4],eax
		t4_false:


		mov ebx, dword[t4]

		cmp  ebx, TRUE

		je t4_if_then

		jmp t4_if_else

		t4_if_then:
		push t5
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t4_if_end

		t4_if_else:
		push t6
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		t4_if_end:
Object File Created : nasm -f win32 C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.asm
Exe File Created : gcc C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.obj -o C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.exe
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 12 	 | DECLARATION 	 | a
| 17 	 | INSTRUCTIONLIST 	 | stringFalse
| 17 	 | INSTRUCTIONLIST 	 | stringTrue
| 17 	 | INSTRUCTIONLIST 	 | formatoutnumber
| 17 	 | INSTRUCTIONLIST 	 | formatoutdecimal
| 17 	 | INSTRUCTIONLIST 	 | formatoutchar
| 17 	 | INSTRUCTIONLIST 	 | formatoutstring
| 17 	 | INSTRUCTIONLIST 	 | formatoutbool
| 17 	 | INSTRUCTIONLIST 	 | formatinnumber
| 17 	 | INSTRUCTIONLIST 	 | formatindecimal
| 17 	 | INSTRUCTIONLIST 	 | formatinchar
| 17 	 | INSTRUCTIONLIST 	 | formatinstring
| 17 	 | INSTRUCTIONLIST 	 | formatinbool
| 12 	 | DECLARATION 	 | a
| 12 	 | % 	 | t1
| 12 	 | % 	 | t2
| 12 	 | = 	 | t3
| 15 	 | = 	 | t4
| 17 	 | On 	 | t5
| 17 	 | On 	 | t6
