
READING FROM : Code.cx
WRITING TO : Code.cx_logFile.txt

Token:	012 --> IDN_NUMBER                    	Lex:	N
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <DECLAREEXP>
Token:	008 --> COMMA                         	Lex:	,
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <DECLAREEXP>
Token:	008 --> COMMA                         	Lex:	,
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <DECLAREEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <DECLAREEXP>
Exiting <DECLAREEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ATTRIBUTION>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	3
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <ATTRIBUTION>
Exiting <INSTRUCTION>
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ATTRIBUTION>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	4
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <ATTRIBUTION>
Exiting <INSTRUCTION>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ATTRIBUTION>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	4
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <ATTRIBUTION>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	037 --> OP_BIGGER                     	Lex:	>
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"MAIOR\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	040 --> OP_EQUAL                      	Lex:	=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	044 --> OP_XOR                        	Lex:	X
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Token:	043 --> OP_NOT                        	Lex:	!
Entering <BEXP>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	038 --> OP_BIGGER_EQUAL               	Lex:	>=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <BEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"IGUAL\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	y
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	038 --> OP_BIGGER_EQUAL               	Lex:	>=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"MAIOR OU IGUAL\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	036 --> OP_MINOR                      	Lex:	<
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"MENOR\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	045 --> OP_NOT_EQUAL                  	Lex:	!=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"NE\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	072 --> RESERVED_IF                   	Lex:	If
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <IF>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	x
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	039 --> OP_MINOR_EQUAL                	Lex:	<=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	z
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	004 --> POINT                         	Lex:	.
Token:	073 --> RESERVED_THEN                 	Lex:	Then
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"MENOR IGUAL\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Token:	004 --> POINT                         	Lex:	.
Token:	074 --> RESERVED_ELSE                 	Lex:	Else
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"Nao"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <INSTRUCTIONLIST>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <IF>
Exiting <INSTRUCTION>
Token:	013 --> IDN_DECIMAL                   	Lex:	D
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	xx
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	077 --> RESERVED_IN                   	Lex:	In
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Entering <IN>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Token:	004 --> POINT                         	Lex:	.
Entering <CASTIN>
Token:	094 --> RESERVED_CAST_DECIMAL         	Lex:	ToDecimal
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <CASTIN>
Exiting <IN>
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	012 --> IDN_NUMBER                    	Lex:	N
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	yy
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	2
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	013 --> IDN_DECIMAL                   	Lex:	D
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	resultado
Entering <DECLAREEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	011 --> IDENTIFIER                    	Lex:	resultado
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ATTRIBUTION>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	011 --> IDENTIFIER                    	Lex:	yy
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	034 --> OP_MUL                        	Lex:	*
Exiting <FACTOR>
Token:	011 --> IDENTIFIER                    	Lex:	xx
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <ATTRIBUTION>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	resultado
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	-01 --> EOF                           	Lex:	EOF
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>

MAX_DEPTH_TREE FOUND : 26
PROGRAM
|_INSTRUCTIONLIST
  |-INSTRUCTION
  | |_DECLARATION
  |   |-N
  |   |-DECLAREEXP
  |   | |_x
  |   |-,
  |   |-DECLAREEXP
  |   | |_y
  |   |-,
  |   |_DECLAREEXP
  |     |_z
  |-;
  |_INSTRUCTIONLIST
    |-INSTRUCTION
    | |_ATTRIBUTION
    |   |-x
    |   |-<<
    |   |_BEXP
    |     |_CEXP
    |       |_EXP
    |         |_TERM
    |           |_FACTOR
    |             |_3
    |-;
    |_INSTRUCTIONLIST
      |-INSTRUCTION
      | |_ATTRIBUTION
      |   |-y
      |   |-<<
      |   |_BEXP
      |     |_CEXP
      |       |_EXP
      |         |_TERM
      |           |_FACTOR
      |             |_4
      |-;
      |_INSTRUCTIONLIST
        |-INSTRUCTION
        | |_ATTRIBUTION
        |   |-z
        |   |-<<
        |   |_BEXP
        |     |_CEXP
        |       |_EXP
        |         |_TERM
        |           |_FACTOR
        |             |_4
        |-;
        |_INSTRUCTIONLIST
          |-INSTRUCTION
          | |_IF
          |   |-If
          |   |-(
          |   |-BEXP
          |   | |_CEXP
          |   |   |-EXP
          |   |   | |_TERM
          |   |   |   |_FACTOR
          |   |   |     |_y
          |   |   |->
          |   |   |_EXP
          |   |     |_TERM
          |   |       |_FACTOR
          |   |         |_x
          |   |-)
          |   |-.
          |   |-Then
          |   | |-(
          |   | |-INSTRUCTIONLIST
          |   | | |-INSTRUCTION
          |   | | | |_ON
          |   | | |   |-On
          |   | | |   |-.
          |   | | |   |-Console
          |   | | |   |-(
          |   | | |   |-BEXP
          |   | | |   | |_CEXP
          |   | | |   |   |_EXP
          |   | | |   |     |_TERM
          |   | | |   |       |_FACTOR
          |   | | |   |         |_"MAIOR\n"
          |   | | |   |_)
          |   | | |-;
          |   | | |_INSTRUCTIONLIST
          |   | |   |-INSTRUCTION
          |   | |   | |_IF
          |   | |   |   |-If
          |   | |   |   |-(
          |   | |   |   |-BEXP
          |   | |   |   | |-CEXP
          |   | |   |   | | |-EXP
          |   | |   |   | | | |_TERM
          |   | |   |   | | |   |_FACTOR
          |   | |   |   | | |     |_y
          |   | |   |   | | |-=
          |   | |   |   | | |_EXP
          |   | |   |   | |   |_TERM
          |   | |   |   | |     |_FACTOR
          |   | |   |   | |       |_z
          |   | |   |   | |-X
          |   | |   |   | |_BEXP
          |   | |   |   |   |-!
          |   | |   |   |   |-(
          |   | |   |   |   |-BEXP
          |   | |   |   |   | |_CEXP
          |   | |   |   |   |   |-EXP
          |   | |   |   |   |   | |_TERM
          |   | |   |   |   |   |   |_FACTOR
          |   | |   |   |   |   |     |_y
          |   | |   |   |   |   |->=
          |   | |   |   |   |   |_EXP
          |   | |   |   |   |     |_TERM
          |   | |   |   |   |       |_FACTOR
          |   | |   |   |   |         |_z
          |   | |   |   |   |_)
          |   | |   |   |-)
          |   | |   |   |-.
          |   | |   |   |_Then
          |   | |   |     |-(
          |   | |   |     |-INSTRUCTIONLIST
          |   | |   |     | |-INSTRUCTION
          |   | |   |     | | |_ON
          |   | |   |     | |   |-On
          |   | |   |     | |   |-.
          |   | |   |     | |   |-Console
          |   | |   |     | |   |-(
          |   | |   |     | |   |-BEXP
          |   | |   |     | |   | |_CEXP
          |   | |   |     | |   |   |_EXP
          |   | |   |     | |   |     |_TERM
          |   | |   |     | |   |       |_FACTOR
          |   | |   |     | |   |         |_"IGUAL\n"
          |   | |   |     | |   |_)
          |   | |   |     | |_;
          |   | |   |     |_)
          |   | |   |-;
          |   | |   |_INSTRUCTIONLIST
          |   | |     |-INSTRUCTION
          |   | |     | |_IF
          |   | |     |   |-If
          |   | |     |   |-(
          |   | |     |   |-BEXP
          |   | |     |   | |_CEXP
          |   | |     |   |   |-EXP
          |   | |     |   |   | |_TERM
          |   | |     |   |   |   |_FACTOR
          |   | |     |   |   |     |_y
          |   | |     |   |   |->=
          |   | |     |   |   |_EXP
          |   | |     |   |     |_TERM
          |   | |     |   |       |_FACTOR
          |   | |     |   |         |_z
          |   | |     |   |-)
          |   | |     |   |-.
          |   | |     |   |_Then
          |   | |     |     |-(
          |   | |     |     |-INSTRUCTIONLIST
          |   | |     |     | |-INSTRUCTION
          |   | |     |     | | |_ON
          |   | |     |     | |   |-On
          |   | |     |     | |   |-.
          |   | |     |     | |   |-Console
          |   | |     |     | |   |-(
          |   | |     |     | |   |-BEXP
          |   | |     |     | |   | |_CEXP
          |   | |     |     | |   |   |_EXP
          |   | |     |     | |   |     |_TERM
          |   | |     |     | |   |       |_FACTOR
          |   | |     |     | |   |         |_"MAIOR OU IGUAL\n"
          |   | |     |     | |   |_)
          |   | |     |     | |_;
          |   | |     |     |_)
          |   | |     |-;
          |   | |     |_INSTRUCTIONLIST
          |   | |       |-INSTRUCTION
          |   | |       | |_IF
          |   | |       |   |-If
          |   | |       |   |-(
          |   | |       |   |-BEXP
          |   | |       |   | |_CEXP
          |   | |       |   |   |-EXP
          |   | |       |   |   | |_TERM
          |   | |       |   |   |   |_FACTOR
          |   | |       |   |   |     |_x
          |   | |       |   |   |-<
          |   | |       |   |   |_EXP
          |   | |       |   |     |_TERM
          |   | |       |   |       |_FACTOR
          |   | |       |   |         |_z
          |   | |       |   |-)
          |   | |       |   |-.
          |   | |       |   |_Then
          |   | |       |     |-(
          |   | |       |     |-INSTRUCTIONLIST
          |   | |       |     | |-INSTRUCTION
          |   | |       |     | | |_ON
          |   | |       |     | |   |-On
          |   | |       |     | |   |-.
          |   | |       |     | |   |-Console
          |   | |       |     | |   |-(
          |   | |       |     | |   |-BEXP
          |   | |       |     | |   | |_CEXP
          |   | |       |     | |   |   |_EXP
          |   | |       |     | |   |     |_TERM
          |   | |       |     | |   |       |_FACTOR
          |   | |       |     | |   |         |_"MENOR\n"
          |   | |       |     | |   |_)
          |   | |       |     | |_;
          |   | |       |     |_)
          |   | |       |-;
          |   | |       |_INSTRUCTIONLIST
          |   | |         |-INSTRUCTION
          |   | |         | |_IF
          |   | |         |   |-If
          |   | |         |   |-(
          |   | |         |   |-BEXP
          |   | |         |   | |_CEXP
          |   | |         |   |   |-EXP
          |   | |         |   |   | |_TERM
          |   | |         |   |   |   |_FACTOR
          |   | |         |   |   |     |_x
          |   | |         |   |   |-!=
          |   | |         |   |   |_EXP
          |   | |         |   |     |_TERM
          |   | |         |   |       |_FACTOR
          |   | |         |   |         |_z
          |   | |         |   |-)
          |   | |         |   |-.
          |   | |         |   |_Then
          |   | |         |     |-(
          |   | |         |     |-INSTRUCTIONLIST
          |   | |         |     | |-INSTRUCTION
          |   | |         |     | | |_ON
          |   | |         |     | |   |-On
          |   | |         |     | |   |-.
          |   | |         |     | |   |-Console
          |   | |         |     | |   |-(
          |   | |         |     | |   |-BEXP
          |   | |         |     | |   | |_CEXP
          |   | |         |     | |   |   |_EXP
          |   | |         |     | |   |     |_TERM
          |   | |         |     | |   |       |_FACTOR
          |   | |         |     | |   |         |_"NE\n"
          |   | |         |     | |   |_)
          |   | |         |     | |_;
          |   | |         |     |_)
          |   | |         |-;
          |   | |         |_INSTRUCTIONLIST
          |   | |           |-INSTRUCTION
          |   | |           | |_IF
          |   | |           |   |-If
          |   | |           |   |-(
          |   | |           |   |-BEXP
          |   | |           |   | |_CEXP
          |   | |           |   |   |-EXP
          |   | |           |   |   | |_TERM
          |   | |           |   |   |   |_FACTOR
          |   | |           |   |   |     |_x
          |   | |           |   |   |-<=
          |   | |           |   |   |_EXP
          |   | |           |   |     |_TERM
          |   | |           |   |       |_FACTOR
          |   | |           |   |         |_z
          |   | |           |   |-)
          |   | |           |   |-.
          |   | |           |   |_Then
          |   | |           |     |-(
          |   | |           |     |-INSTRUCTIONLIST
          |   | |           |     | |-INSTRUCTION
          |   | |           |     | | |_ON
          |   | |           |     | |   |-On
          |   | |           |     | |   |-.
          |   | |           |     | |   |-Console
          |   | |           |     | |   |-(
          |   | |           |     | |   |-BEXP
          |   | |           |     | |   | |_CEXP
          |   | |           |     | |   |   |_EXP
          |   | |           |     | |   |     |_TERM
          |   | |           |     | |   |       |_FACTOR
          |   | |           |     | |   |         |_"MENOR IGUAL\n"
          |   | |           |     | |   |_)
          |   | |           |     | |_;
          |   | |           |     |_)
          |   | |           |_;
          |   | |_)
          |   |-.
          |   |_Else
          |     |-(
          |     |-INSTRUCTIONLIST
          |     | |-INSTRUCTION
          |     | | |_ON
          |     | |   |-On
          |     | |   |-.
          |     | |   |-Console
          |     | |   |-(
          |     | |   |-BEXP
          |     | |   | |_CEXP
          |     | |   |   |_EXP
          |     | |   |     |_TERM
          |     | |   |       |_FACTOR
          |     | |   |         |_"Nao"
          |     | |   |_)
          |     | |_;
          |     |_)
          |-;
          |_INSTRUCTIONLIST
            |-INSTRUCTION
            | |_DECLARATION
            |   |-D
            |   |_DECLAREEXP
            |     |-xx
            |     |-<<
            |     |_BEXP
            |       |_CEXP
            |         |_EXP
            |           |_TERM
            |             |_FACTOR
            |               |_IN
            |                 |-In
            |                 |-.
            |                 |-Console
            |                 |-(
            |                 |-)
            |                 |_CASTIN
            |                   |-.
            |                   |-ToDecimal
            |                   |-(
            |                   |_)
            |-;
            |_INSTRUCTIONLIST
              |-INSTRUCTION
              | |_DECLARATION
              |   |-N
              |   |_DECLAREEXP
              |     |-yy
              |     |-<<
              |     |_BEXP
              |       |_CEXP
              |         |_EXP
              |           |_TERM
              |             |_FACTOR
              |               |_2
              |-;
              |_INSTRUCTIONLIST
                |-INSTRUCTION
                | |_DECLARATION
                |   |-D
                |   |_DECLAREEXP
                |     |_resultado
                |-;
                |_INSTRUCTIONLIST
                  |-INSTRUCTION
                  | |_ATTRIBUTION
                  |   |-resultado
                  |   |-<<
                  |   |_BEXP
                  |     |_CEXP
                  |       |_EXP
                  |         |_TERM
                  |           |-FACTOR
                  |           | |_yy
                  |           |-*
                  |           |_TERM
                  |             |_FACTOR
                  |               |_xx
                  |-;
                  |_INSTRUCTIONLIST
                    |-INSTRUCTION
                    | |_ON
                    |   |-On
                    |   |-.
                    |   |-Console
                    |   |-(
                    |   |-BEXP
                    |   | |_CEXP
                    |   |   |_EXP
                    |   |     |_TERM
                    |   |       |_FACTOR
                    |   |         |_resultado
                    |   |_)
                    |-;
                    |_EOF
Entering PROGRAM
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering N
Exiting N
Entering DECLAREEXP
Entering x
Exiting x
Exiting x
Entering ,
Entering DECLAREEXP
Entering y
Exiting y
Exiting y
Entering ,
Entering DECLAREEXP
Entering z
Exiting z
Exiting z
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ATTRIBUTION
Entering x
Exiting x
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting <<
Exiting <<
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ATTRIBUTION
Entering y
Exiting y
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting <<
Exiting <<
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ATTRIBUTION
Entering z
Exiting z
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting 4
Exiting <<
Exiting <<
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering y
Exiting y
Exiting y
Exiting y
Exiting y
Entering >
Exiting >
Entering EXP
Entering TERM
Entering FACTOR
Entering x
Exiting x
Exiting x
Exiting x
Exiting x
Exiting >
Exiting >
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "MAIOR\n"
Exiting MAIOR\n
Exiting MAIOR\n
Exiting MAIOR\n
Exiting MAIOR\n
Exiting MAIOR\n
Exiting MAIOR\n
Entering )
Exiting On
Exiting On
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering y
Exiting y
Exiting y
Exiting y
Exiting y
Entering =
Exiting =
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting =
Entering X
Exiting X
Entering BEXP
Entering !
Exiting !
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering y
Exiting y
Exiting y
Exiting y
Exiting y
Entering >=
Exiting >=
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting >=
Exiting >=
Entering )
Exiting !
Exiting X
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "IGUAL\n"
Exiting IGUAL\n
Exiting IGUAL\n
Exiting IGUAL\n
Exiting IGUAL\n
Exiting IGUAL\n
Exiting IGUAL\n
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Exiting If
Exiting If
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering y
Exiting y
Exiting y
Exiting y
Exiting y
Entering >=
Exiting >=
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting >=
Exiting >=
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "MAIOR OU IGUAL\n"
Exiting MAIOR OU IGUAL\n
Exiting MAIOR OU IGUAL\n
Exiting MAIOR OU IGUAL\n
Exiting MAIOR OU IGUAL\n
Exiting MAIOR OU IGUAL\n
Exiting MAIOR OU IGUAL\n
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Exiting If
Exiting If
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering x
Exiting x
Exiting x
Exiting x
Exiting x
Entering <
Exiting <
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting <
Exiting <
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "MENOR\n"
Exiting MENOR\n
Exiting MENOR\n
Exiting MENOR\n
Exiting MENOR\n
Exiting MENOR\n
Exiting MENOR\n
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Exiting If
Exiting If
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering x
Exiting x
Exiting x
Exiting x
Exiting x
Entering !=
Exiting !=
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting !=
Exiting !=
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "NE\n"
Exiting NE\n
Exiting NE\n
Exiting NE\n
Exiting NE\n
Exiting NE\n
Exiting NE\n
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Exiting If
Exiting If
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering IF
Entering If
Exiting If
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering x
Exiting x
Exiting x
Exiting x
Exiting x
Entering <=
Exiting <=
Entering EXP
Entering TERM
Entering FACTOR
Entering z
Exiting z
Exiting z
Exiting z
Exiting z
Exiting <=
Exiting <=
Entering )
Entering .
Entering Then
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "MENOR IGUAL\n"
Exiting MENOR IGUAL\n
Exiting MENOR IGUAL\n
Exiting MENOR IGUAL\n
Exiting MENOR IGUAL\n
Exiting MENOR IGUAL\n
Exiting MENOR IGUAL\n
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Then
Exiting If
Exiting If
Entering ;
Exiting If
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Entering )
Exiting Then
Entering .
Entering Else
Entering (
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "Nao"
Exiting Nao
Exiting Nao
Exiting Nao
Exiting Nao
Exiting Nao
Exiting Nao
Entering )
Exiting On
Exiting On
Entering ;
Exiting On
Entering )
Exiting Else
Exiting If
Exiting If
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering D
Exiting D
Entering DECLAREEXP
Entering xx
Exiting xx
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering IN
Entering In
Exiting In
Entering .
Entering Console
Exiting Console
Entering (
Entering )
Entering CASTIN
Entering .
Entering ToDecimal
Exiting ToDecimal
Entering (
Entering )
Exiting ToDecimal
Exiting In
Exiting In
Exiting In
Exiting In
Exiting In
Exiting In
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering N
Exiting N
Entering DECLAREEXP
Entering yy
Exiting yy
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering D
Exiting D
Entering DECLAREEXP
Entering resultado
Exiting resultado
Exiting resultado
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ATTRIBUTION
Entering resultado
Exiting resultado
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering yy
Exiting yy
Exiting yy
Entering *
Exiting *
Entering TERM
Entering FACTOR
Entering xx
Exiting xx
Exiting xx
Exiting xx
Exiting *
Exiting *
Exiting *
Exiting *
Exiting <<
Exiting <<
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering resultado
Exiting resultado
Exiting resultado
Exiting resultado
Exiting resultado
Exiting resultado
Exiting resultado
Entering )
Exiting On
Exiting On
Entering ;
Entering EOF
Exiting On
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-N
| |-x
| |-y
| |_z
|_INSTRUCTIONLIST
  |-<<
  | |-x
  | |_3
  |_INSTRUCTIONLIST
    |-<<
    | |-y
    | |_4
    |_INSTRUCTIONLIST
      |-<<
      | |-z
      | |_4
      |_INSTRUCTIONLIST
        |-If
        | |->
        | | |-y
        | | |_x
        | |-Then
        | | |_INSTRUCTIONLIST
        | |   |-On
        | |   | |-Console
        | |   | |_MAIOR\n
        | |   |_INSTRUCTIONLIST
        | |     |-If
        | |     | |-X
        | |     | | |-=
        | |     | | | |-y
        | |     | | | |_z
        | |     | | |_!
        | |     | |   |_>=
        | |     | |     |-y
        | |     | |     |_z
        | |     | |_Then
        | |     |   |_On
        | |     |     |-Console
        | |     |     |_IGUAL\n
        | |     |_INSTRUCTIONLIST
        | |       |-If
        | |       | |->=
        | |       | | |-y
        | |       | | |_z
        | |       | |_Then
        | |       |   |_On
        | |       |     |-Console
        | |       |     |_MAIOR OU IGUAL\n
        | |       |_INSTRUCTIONLIST
        | |         |-If
        | |         | |-<
        | |         | | |-x
        | |         | | |_z
        | |         | |_Then
        | |         |   |_On
        | |         |     |-Console
        | |         |     |_MENOR\n
        | |         |_INSTRUCTIONLIST
        | |           |-If
        | |           | |-!=
        | |           | | |-x
        | |           | | |_z
        | |           | |_Then
        | |           |   |_On
        | |           |     |-Console
        | |           |     |_NE\n
        | |           |_If
        | |             |-<=
        | |             | |-x
        | |             | |_z
        | |             |_Then
        | |               |_On
        | |                 |-Console
        | |                 |_MENOR IGUAL\n
        | |_Else
        |   |_On
        |     |-Console
        |     |_Nao
        |_INSTRUCTIONLIST
          |-DECLARATION
          | |-D
          | |_<<
          |   |-xx
          |   |_In
          |     |-Console
          |     |_ToDecimal
          |_INSTRUCTIONLIST
            |-DECLARATION
            | |-N
            | |_<<
            |   |-yy
            |   |_2
            |_INSTRUCTIONLIST
              |-DECLARATION
              | |-D
              | |_resultado
              |_INSTRUCTIONLIST
                |-<<
                | |-resultado
                | |_*
                |   |-yy
                |   |_xx
                |_On
                  |-Console
                  |_resultado
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of N
Optimization start N
End Optimization of N
Optimization of x
Optimization start x
End Optimization of x
Optimization of y
Optimization start y
End Optimization of y
Optimization of z
Optimization start z
End Optimization of z
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of <<
Optimization of x
Optimization start x
End Optimization of x
Optimization of 3
Optimization start 3
End Optimization of 3
Optimization start <<
End Optimization of <<
Optimization of INSTRUCTIONLIST
Optimization of <<
Optimization of y
Optimization start y
End Optimization of y
Optimization of 4
Optimization start 4
End Optimization of 4
Optimization start <<
End Optimization of <<
Optimization of INSTRUCTIONLIST
Optimization of <<
Optimization of z
Optimization start z
End Optimization of z
Optimization of 4
Optimization start 4
End Optimization of 4
Optimization start <<
End Optimization of <<
Optimization of INSTRUCTIONLIST
Optimization of If
Optimization of >
Optimization of y
Optimization start y
End Optimization of y
Optimization of x
Optimization start x
End Optimization of x
Optimization start >
Optimization result >
End Optimization of >
Optimization of Then
Optimization of INSTRUCTIONLIST
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of MAIOR\n
Optimization start MAIOR\n
End Optimization of MAIOR\n
Optimization start On
End Optimization of On
Optimization of INSTRUCTIONLIST
Optimization of If
Optimization of X
Optimization of =
Optimization of y
Optimization start y
End Optimization of y
Optimization of z
Optimization start z
End Optimization of z
Optimization start =
Optimization result =
End Optimization of =
Optimization of !
Optimization of >=
Optimization of y
Optimization start y
End Optimization of y
Optimization of z
Optimization start z
End Optimization of z
Optimization start >=
Optimization result >=
End Optimization of >=
Optimization start !
Optimization result !
End Optimization of !
Optimization start X
Optimization result X
End Optimization of X
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of IGUAL\n
Optimization start IGUAL\n
End Optimization of IGUAL\n
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization start If
End Optimization of If
Optimization of INSTRUCTIONLIST
Optimization of If
Optimization of >=
Optimization of y
Optimization start y
End Optimization of y
Optimization of z
Optimization start z
End Optimization of z
Optimization start >=
Optimization result >=
End Optimization of >=
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of MAIOR OU IGUAL\n
Optimization start MAIOR OU IGUAL\n
End Optimization of MAIOR OU IGUAL\n
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization start If
End Optimization of If
Optimization of INSTRUCTIONLIST
Optimization of If
Optimization of <
Optimization of x
Optimization start x
End Optimization of x
Optimization of z
Optimization start z
End Optimization of z
Optimization start <
Optimization result <
End Optimization of <
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of MENOR\n
Optimization start MENOR\n
End Optimization of MENOR\n
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization start If
End Optimization of If
Optimization of INSTRUCTIONLIST
Optimization of If
Optimization of !=
Optimization of x
Optimization start x
End Optimization of x
Optimization of z
Optimization start z
End Optimization of z
Optimization start !=
Optimization result !=
End Optimization of !=
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of NE\n
Optimization start NE\n
End Optimization of NE\n
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization start If
End Optimization of If
Optimization of If
Optimization of <=
Optimization of x
Optimization start x
End Optimization of x
Optimization of z
Optimization start z
End Optimization of z
Optimization start <=
Optimization result <=
End Optimization of <=
Optimization of Then
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of MENOR IGUAL\n
Optimization start MENOR IGUAL\n
End Optimization of MENOR IGUAL\n
Optimization start On
End Optimization of On
Optimization start Then
End Optimization of Then
Optimization start If
End Optimization of If
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start Then
End Optimization of Then
Optimization of Else
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of Nao
Optimization start Nao
End Optimization of Nao
Optimization start On
End Optimization of On
Optimization start Else
End Optimization of Else
Optimization start If
End Optimization of If
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of D
Optimization start D
End Optimization of D
Optimization of <<
Optimization of xx
Optimization start xx
End Optimization of xx
Optimization of In
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of ToDecimal
Optimization start ToDecimal
End Optimization of ToDecimal
Optimization start In
End Optimization of In
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of N
Optimization start N
End Optimization of N
Optimization of <<
Optimization of yy
Optimization start yy
End Optimization of yy
Optimization of 2
Optimization start 2
End Optimization of 2
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of D
Optimization start D
End Optimization of D
Optimization of resultado
Optimization start resultado
End Optimization of resultado
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of <<
Optimization of resultado
Optimization start resultado
End Optimization of resultado
Optimization of *
Optimization of yy
Optimization start yy
End Optimization of yy
Optimization of xx
Optimization start xx
End Optimization of xx
Optimization start *
Optimization result *
End Optimization of *
Optimization start <<
End Optimization of <<
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of resultado
Optimization start resultado
End Optimization of resultado
Optimization start On
End Optimization of On
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-N
| |-x
| |-y
| |_z
|_INSTRUCTIONLIST
  |-<<
  | |-x
  | |_3
  |_INSTRUCTIONLIST
    |-<<
    | |-y
    | |_4
    |_INSTRUCTIONLIST
      |-<<
      | |-z
      | |_4
      |_INSTRUCTIONLIST
        |-If
        | |->
        | | |-y
        | | |_x
        | |-Then
        | | |_INSTRUCTIONLIST
        | |   |-On
        | |   | |-Console
        | |   | |_MAIOR\n
        | |   |_INSTRUCTIONLIST
        | |     |-If
        | |     | |-X
        | |     | | |-=
        | |     | | | |-y
        | |     | | | |_z
        | |     | | |_!
        | |     | |   |_>=
        | |     | |     |-y
        | |     | |     |_z
        | |     | |_Then
        | |     |   |_On
        | |     |     |-Console
        | |     |     |_IGUAL\n
        | |     |_INSTRUCTIONLIST
        | |       |-If
        | |       | |->=
        | |       | | |-y
        | |       | | |_z
        | |       | |_Then
        | |       |   |_On
        | |       |     |-Console
        | |       |     |_MAIOR OU IGUAL\n
        | |       |_INSTRUCTIONLIST
        | |         |-If
        | |         | |-<
        | |         | | |-x
        | |         | | |_z
        | |         | |_Then
        | |         |   |_On
        | |         |     |-Console
        | |         |     |_MENOR\n
        | |         |_INSTRUCTIONLIST
        | |           |-If
        | |           | |-!=
        | |           | | |-x
        | |           | | |_z
        | |           | |_Then
        | |           |   |_On
        | |           |     |-Console
        | |           |     |_NE\n
        | |           |_If
        | |             |-<=
        | |             | |-x
        | |             | |_z
        | |             |_Then
        | |               |_On
        | |                 |-Console
        | |                 |_MENOR IGUAL\n
        | |_Else
        |   |_On
        |     |-Console
        |     |_Nao
        |_INSTRUCTIONLIST
          |-DECLARATION
          | |-D
          | |_<<
          |   |-xx
          |   |_In
          |     |-Console
          |     |_ToDecimal
          |_INSTRUCTIONLIST
            |-DECLARATION
            | |-N
            | |_<<
            |   |-yy
            |   |_2
            |_INSTRUCTIONLIST
              |-DECLARATION
              | |-D
              | |_resultado
              |_INSTRUCTIONLIST
                |-<<
                | |-resultado
                | |_*
                |   |-yy
                |   |_xx
                |_On
                  |-Console
                  |_resultado
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 12 	 | DECLARATION 	 | z
| 13 	 | DECLARATION 	 | xx
| 12 	 | DECLARATION 	 | yy
| 13 	 | DECLARATION 	 | resultado
	x : dd 0
	y : dd 0
	z : dd 0
		mov eax, 3
		mov eax, 4
		mov eax, 4
		mov eax, dword[y]
		mov ebx, dword[x]
	t1 : dd 0
		cmp eax, ebx
		jg	t1_true
		mov eax,FALSE
		mov dword[t1],eax
		jmp t1_false
		t1_true:
		mov eax,TRUE
		mov dword[t1],eax
		t1_false:


		mov eax, dword[t1]

		cmp  eax, TRUE

		je t1_if_then

		jmp t1_if_else

		t1_if_then:
		push t2
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4

		mov eax, dword[y]
		mov ebx, dword[z]
	t3 : dd 0
		cmp eax, ebx
		je	t3_true
		mov eax,FALSE
		mov dword[t3],eax
		jmp t3_false
		t3_true:
		mov eax,TRUE
		mov dword[t3],eax
		t3_false:

		mov eax, dword[y]
		mov ebx, dword[z]
	t4 : dd 0
		cmp eax, ebx
		jge	t4_true
		mov eax,FALSE
		mov dword[t4],eax
		jmp t4_false
		t4_true:
		mov eax,TRUE
		mov dword[t4],eax
		t4_false:

	t5 : dd 0
		mov eax, dword[t4]
		cmp eax, FALSE
		je t5_true
		mov dword[t5], FALSE
		jmp t5_false
		t5_true:
		mov dword[t5],TRUE
		t5_false:
	t6 : dd 0
		mov eax, dword[t3]
		mov ebx, dword[t5]
		xor eax,ebx
		cmp eax, TRUE
		je t6_true
		mov dword[t6], FALSE
		jmp t6_false
		t6_true:
		mov dword[t6],TRUE
		t6_false:

		mov eax, dword[t6]

		cmp  eax, TRUE

		je t6_if_then

		jmp t6_if_else

		t6_if_then:
		push t7
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t6_if_end

		t6_if_else:

		t6_if_end:
		mov eax, dword[y]
		mov ebx, dword[z]
	t8 : dd 0
		cmp eax, ebx
		jge	t8_true
		mov eax,FALSE
		mov dword[t8],eax
		jmp t8_false
		t8_true:
		mov eax,TRUE
		mov dword[t8],eax
		t8_false:


		mov eax, dword[t8]

		cmp  eax, TRUE

		je t8_if_then

		jmp t8_if_else

		t8_if_then:
		push t9
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t8_if_end

		t8_if_else:

		t8_if_end:
		mov eax, dword[x]
		mov ebx, dword[z]
	t10 : dd 0
		cmp eax, ebx
		jl	t10_true
		mov eax,FALSE
		mov dword[t10],eax
		jmp t10_false
		t10_true:
		mov eax,TRUE
		mov dword[t10],eax
		t10_false:


		mov eax, dword[t10]

		cmp  eax, TRUE

		je t10_if_then

		jmp t10_if_else

		t10_if_then:
		push t11
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t10_if_end

		t10_if_else:

		t10_if_end:
		mov eax, dword[x]
		mov ebx, dword[z]
	t12 : dd 0
		cmp eax, ebx
		jne	t12_true
		mov eax,FALSE
		mov dword[t12],eax
		jmp t12_false
		t12_true:
		mov eax,TRUE
		mov dword[t12],eax
		t12_false:


		mov eax, dword[t12]

		cmp  eax, TRUE

		je t12_if_then

		jmp t12_if_else

		t12_if_then:
		push t13
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t12_if_end

		t12_if_else:

		t12_if_end:
		mov eax, dword[x]
		mov ebx, dword[z]
	t14 : dd 0
		cmp eax, ebx
		jle	t14_true
		mov eax,FALSE
		mov dword[t14],eax
		jmp t14_false
		t14_true:
		mov eax,TRUE
		mov dword[t14],eax
		t14_false:


		mov eax, dword[t14]

		cmp  eax, TRUE

		je t14_if_then

		jmp t14_if_else

		t14_if_then:
		push t15
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		jmp t14_if_end

		t14_if_else:

		t14_if_end:

		jmp t1_if_end

		t1_if_else:
		push t16
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4


		t1_if_end:
		push t17 ; Temporary Read
	t17 : resd 1 
		push formatindecimal; number reading
		call _scanf; call defined function
		add esp, 8; params * 4

		fld dword[t17]
		fstp dword[xx]

	xx : dd 0.0
		mov eax, 2
	yy : dd 0
	resultado : dd 0.0
		fild dword[yy] ; Moving First Operand Number Var
		fld dword[xx] ; Moving Second Operand Decimal Var
		fmul ; Multiplying First and Second Operand Number
		fstp dword[t18] ;Result 

		fld dword[t18]
		fstp dword[resultado]

		sub esp, 8;reserve stack for a double in stack
		mov ebx, resultado
		fld dword[ebx];load float
		fstp qword[esp];store double(8087 does the conversion internally)
		push formatoutdecimal; push message into ESP
		call _printf; call defined function
		add esp, 12; params * 4

Object File Created : nasm -f win32 C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.asm
Exe File Created : gcc C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.obj -o C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\Code.exe
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 12 	 | DECLARATION 	 | z
| 13 	 | DECLARATION 	 | xx
| 12 	 | DECLARATION 	 | yy
| 13 	 | DECLARATION 	 | resultado
| 17 	 | INSTRUCTIONLIST 	 | stringFalse
| 17 	 | INSTRUCTIONLIST 	 | stringTrue
| 17 	 | INSTRUCTIONLIST 	 | formatoutnumber
| 17 	 | INSTRUCTIONLIST 	 | formatoutdecimal
| 17 	 | INSTRUCTIONLIST 	 | formatoutchar
| 17 	 | INSTRUCTIONLIST 	 | formatoutstring
| 17 	 | INSTRUCTIONLIST 	 | formatoutbool
| 17 	 | INSTRUCTIONLIST 	 | formatinnumber
| 17 	 | INSTRUCTIONLIST 	 | formatindecimal
| 17 	 | INSTRUCTIONLIST 	 | formatinchar
| 17 	 | INSTRUCTIONLIST 	 | formatinstring
| 17 	 | INSTRUCTIONLIST 	 | formatinbool
| 12 	 | DECLARATION 	 | x
| 12 	 | DECLARATION 	 | y
| 12 	 | DECLARATION 	 | z
| 15 	 | > 	 | t1
| 17 	 | On 	 | t2
| 15 	 | = 	 | t3
| 15 	 | >= 	 | t4
| 15 	 | ! 	 | t5
| 15 	 | X 	 | t6
| 17 	 | On 	 | t7
| 15 	 | >= 	 | t8
| 17 	 | On 	 | t9
| 15 	 | < 	 | t10
| 17 	 | On 	 | t11
| 15 	 | != 	 | t12
| 17 	 | On 	 | t13
| 15 	 | <= 	 | t14
| 17 	 | On 	 | t15
| 17 	 | On 	 | t16
| 13 	 | In 	 | t17
| 13 	 | DECLARATION 	 | xx
| 12 	 | DECLARATION 	 | yy
| 13 	 | DECLARATION 	 | resultado
| 13 	 | * 	 | t18
