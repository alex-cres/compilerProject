
READING FROM : ..\Examples\AttributionAndWriteExample.cx
WRITING TO : ..\Examples\AttributionAndWriteExample.cx_logFile.txt

Token:	017 --> IDN_STRING                    	Lex:	S
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	zx
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	020 --> LITERAL_STRING                	Lex:	"asa"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	zx
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	020 --> LITERAL_STRING                	Lex:	"\n"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	011 --> IDENTIFIER                    	Lex:	zx
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ATTRIBUTION>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	020 --> LITERAL_STRING                	Lex:	"qqqq"
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	032 --> OP_ADD                        	Lex:	+
Exiting <FACTOR>
Exiting <TERM>
Token:	020 --> LITERAL_STRING                	Lex:	"aaaa"
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <ATTRIBUTION>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	zx
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	-01 --> EOF                           	Lex:	EOF
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>

MAX_DEPTH_TREE FOUND : 13
PROGRAM
|_INSTRUCTIONLIST
  |-INSTRUCTION
  | |_DECLARATION
  |   |-S
  |   |_DECLAREEXP
  |     |-zx
  |     |-<<
  |     |_BEXP
  |       |_CEXP
  |         |_EXP
  |           |_TERM
  |             |_FACTOR
  |               |_"asa"
  |-;
  |_INSTRUCTIONLIST
    |-INSTRUCTION
    | |_ON
    |   |-On
    |   |-.
    |   |-Console
    |   |-(
    |   |-BEXP
    |   | |_CEXP
    |   |   |_EXP
    |   |     |_TERM
    |   |       |_FACTOR
    |   |         |_zx
    |   |_)
    |-;
    |_INSTRUCTIONLIST
      |-INSTRUCTION
      | |_ON
      |   |-On
      |   |-.
      |   |-Console
      |   |-(
      |   |-BEXP
      |   | |_CEXP
      |   |   |_EXP
      |   |     |_TERM
      |   |       |_FACTOR
      |   |         |_"\n"
      |   |_)
      |-;
      |_INSTRUCTIONLIST
        |-INSTRUCTION
        | |_ATTRIBUTION
        |   |-zx
        |   |-<<
        |   |_BEXP
        |     |_CEXP
        |       |_EXP
        |         |-TERM
        |         | |_FACTOR
        |         |   |_"qqqq"
        |         |-+
        |         |_EXP
        |           |_TERM
        |             |_FACTOR
        |               |_"aaaa"
        |-;
        |_INSTRUCTIONLIST
          |-INSTRUCTION
          | |_ON
          |   |-On
          |   |-.
          |   |-Console
          |   |-(
          |   |-BEXP
          |   | |_CEXP
          |   |   |_EXP
          |   |     |_TERM
          |   |       |_FACTOR
          |   |         |_zx
          |   |_)
          |-;
          |_EOF
Entering PROGRAM
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering S
Exiting S
Entering DECLAREEXP
Entering zx
Exiting zx
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "asa"
Exiting asa
Exiting asa
Exiting asa
Exiting asa
Exiting asa
Exiting asa
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Entering )
Exiting On
Exiting On
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "\n"
Exiting \n
Exiting \n
Exiting \n
Exiting \n
Exiting \n
Exiting \n
Entering )
Exiting On
Exiting On
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ATTRIBUTION
Entering zx
Exiting zx
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering "qqqq"
Exiting qqqq
Exiting qqqq
Exiting qqqq
Entering +
Exiting +
Entering EXP
Entering TERM
Entering FACTOR
Entering "aaaa"
Exiting aaaa
Exiting aaaa
Exiting aaaa
Exiting aaaa
Exiting +
Exiting +
Exiting +
Exiting <<
Exiting <<
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Exiting zx
Entering )
Exiting On
Exiting On
Entering ;
Entering EOF
Exiting On
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-S
| |_<<
|   |-zx
|   |_asa
|_INSTRUCTIONLIST
  |-On
  | |-Console
  | |_zx
  |_INSTRUCTIONLIST
    |-On
    | |-Console
    | |_\n
    |_INSTRUCTIONLIST
      |-<<
      | |-zx
      | |_+
      |   |-qqqq
      |   |_aaaa
      |_On
        |-Console
        |_zx
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of S
Optimization start S
End Optimization of S
Optimization of <<
Optimization of zx
Optimization start zx
End Optimization of zx
Optimization of asa
Optimization start asa
End Optimization of asa
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of zx
Optimization start zx
End Optimization of zx
Optimization start On
End Optimization of On
Optimization of INSTRUCTIONLIST
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of \n
Optimization start \n
End Optimization of \n
Optimization start On
End Optimization of On
Optimization of INSTRUCTIONLIST
Optimization of <<
Optimization of zx
Optimization start zx
End Optimization of zx
Optimization of +
Optimization of qqqq
Optimization start qqqq
End Optimization of qqqq
Optimization of aaaa
Optimization start aaaa
End Optimization of aaaa
Optimization start +
Optimization result +
End Optimization of +
Optimization start <<
End Optimization of <<
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of zx
Optimization start zx
End Optimization of zx
Optimization start On
End Optimization of On
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-S
| |_<<
|   |-zx
|   |_asa
|_INSTRUCTIONLIST
  |-On
  | |-Console
  | |_zx
  |_INSTRUCTIONLIST
    |-On
    | |-Console
    | |_\n
    |_INSTRUCTIONLIST
      |-<<
      | |-zx
      | |_+
      |   |-qqqq
      |   |_aaaa
      |_On
        |-Console
        |_zx
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 17 	 | DECLARATION 	 | zx
	t1 : times  256  db `asa`,0 
		push t1
		push zx

		call _strcpy

		add esp, 8; params * 4

	zx : times  256  db ``, 0
		push zx
		push formatoutstring; push message into ESP
		call _printf; call defined function
		add esp, 8; params * 4

		push t2
		push formatoutstring; push format into ESP
		call _printf; call defined function
		add esp, 8; params * 4

	t5 : times  256  db ``, 0
	t4 : times  256  db `aaaa`, 0
	t3 : times  256  db `qqqq`, 0
		push	t3 ; Concat Begin
		push	t5 ; Concat Dest
		call _strcat
		add esp, 8
		push	t4 ; Concat Second
		push	t5 ; Concat Dest
		call _strcat
		add esp, 8
		push t5
		push zx

		call _strcpy

		add esp, 8; params * 4

		push zx
		push formatoutstring; push message into ESP
		call _printf; call defined function
		add esp, 8; params * 4

Object File Created : nasm -f win32 C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.asm
Exe File Created : gcc C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.obj -o C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.exe
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 17 	 | DECLARATION 	 | zx
| 17 	 | INSTRUCTIONLIST 	 | formatoutnumber
| 17 	 | INSTRUCTIONLIST 	 | formatoutdecimal
| 17 	 | INSTRUCTIONLIST 	 | formatoutchar
| 17 	 | INSTRUCTIONLIST 	 | formatoutstring
| 17 	 | INSTRUCTIONLIST 	 | formatoutbool
| 17 	 | INSTRUCTIONLIST 	 | formatinnumber
| 17 	 | INSTRUCTIONLIST 	 | formatindecimal
| 17 	 | INSTRUCTIONLIST 	 | formatinchar
| 17 	 | INSTRUCTIONLIST 	 | formatinstring
| 17 	 | INSTRUCTIONLIST 	 | formatinbool
| 17 	 | << 	 | t1
| 17 	 | On 	 | t2
| 17 	 | + 	 | t5
| 17 	 | + 	 | t4
| 17 	 | + 	 | t3
