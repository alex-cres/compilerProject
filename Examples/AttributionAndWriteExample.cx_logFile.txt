
READING FROM : ..\Examples\AttributionAndWriteExample.cx
WRITING TO : ..\Examples\AttributionAndWriteExample.cx_logFile.txt

Token:	015 --> IDN_BOOL                      	Lex:	B
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	b
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	070 --> RESERVED_BOOL_TRUE            	Lex:	True
Entering <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	015 --> IDN_BOOL                      	Lex:	B
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	notb
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	043 --> OP_NOT                        	Lex:	!
Entering <BEXP>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	070 --> RESERVED_BOOL_TRUE            	Lex:	True
Entering <BEXP>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	012 --> IDN_NUMBER                    	Lex:	N
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	a
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	018 --> LITERAL_NUMBER                	Lex:	3
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	015 --> IDN_BOOL                      	Lex:	B
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <DECLARATION>
Token:	011 --> IDENTIFIER                    	Lex:	v
Entering <DECLAREEXP>
Token:	030 --> OP_ATTRIBUTION                	Lex:	<<
Token:	011 --> IDENTIFIER                    	Lex:	b
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	041 --> OP_AND                        	Lex:	&
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	011 --> IDENTIFIER                    	Lex:	notb
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	044 --> OP_XOR                        	Lex:	X
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Token:	070 --> RESERVED_BOOL_TRUE            	Lex:	True
Entering <BEXP>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <BEXP>
Exiting <BEXP>
Token:	041 --> OP_AND                        	Lex:	&
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Token:	018 --> LITERAL_NUMBER                	Lex:	2
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	040 --> OP_EQUAL                      	Lex:	=
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Token:	011 --> IDENTIFIER                    	Lex:	a
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Exiting <BEXP>
Exiting <BEXP>
Exiting <DECLAREEXP>
Exiting <DECLARATION>
Exiting <INSTRUCTION>
Token:	078 --> RESERVED_ON                   	Lex:	On
Entering <INSTRUCTIONLIST>
Entering <INSTRUCTION>
Entering <ON>
Token:	004 --> POINT                         	Lex:	.
Token:	079 --> RESERVED_CONSOLE              	Lex:	Console
Token:	028 --> OPEN_PARENTESIS               	Lex:	(
Token:	011 --> IDENTIFIER                    	Lex:	v
Entering <BEXP>
Entering <CEXP>
Entering <EXP>
Entering <TERM>
Entering <FACTOR>
Token:	029 --> CLOSE_PARENTESIS              	Lex:	)
Exiting <FACTOR>
Exiting <TERM>
Exiting <EXP>
Exiting <CEXP>
Exiting <BEXP>
Token:	005 --> POINT_COMMA                   	Lex:	;
Exiting <ON>
Exiting <INSTRUCTION>
Token:	-01 --> EOF                           	Lex:	EOF
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>
Exiting <INSTRUCTIONLIST>

MAX_DEPTH_TREE FOUND : 19
PROGRAM
|_INSTRUCTIONLIST
  |-INSTRUCTION
  | |_DECLARATION
  |   |-B
  |   |_DECLAREEXP
  |     |-b
  |     |-<<
  |     |_BEXP
  |       |_True
  |-;
  |_INSTRUCTIONLIST
    |-INSTRUCTION
    | |_DECLARATION
    |   |-B
    |   |_DECLAREEXP
    |     |-notb
    |     |-<<
    |     |_BEXP
    |       |-!
    |       |-(
    |       |-BEXP
    |       | |_True
    |       |_)
    |-;
    |_INSTRUCTIONLIST
      |-INSTRUCTION
      | |_DECLARATION
      |   |-N
      |   |_DECLAREEXP
      |     |-a
      |     |-<<
      |     |_BEXP
      |       |_CEXP
      |         |_EXP
      |           |_TERM
      |             |_FACTOR
      |               |_3
      |-;
      |_INSTRUCTIONLIST
        |-INSTRUCTION
        | |_DECLARATION
        |   |-B
        |   |_DECLAREEXP
        |     |-v
        |     |-<<
        |     |_BEXP
        |       |-CEXP
        |       | |_EXP
        |       |   |_TERM
        |       |     |_FACTOR
        |       |       |_b
        |       |-&
        |       |_BEXP
        |         |-CEXP
        |         | |_EXP
        |         |   |_TERM
        |         |     |_FACTOR
        |         |       |-(
        |         |       |-BEXP
        |         |       | |-CEXP
        |         |       | | |_EXP
        |         |       | |   |_TERM
        |         |       | |     |_FACTOR
        |         |       | |       |_notb
        |         |       | |-X
        |         |       | |_BEXP
        |         |       |   |_True
        |         |       |_)
        |         |-&
        |         |_BEXP
        |           |_CEXP
        |             |-EXP
        |             | |_TERM
        |             |   |_FACTOR
        |             |     |_2
        |             |-=
        |             |_EXP
        |               |_TERM
        |                 |_FACTOR
        |                   |_a
        |-;
        |_INSTRUCTIONLIST
          |-INSTRUCTION
          | |_ON
          |   |-On
          |   |-.
          |   |-Console
          |   |-(
          |   |-BEXP
          |   | |_CEXP
          |   |   |_EXP
          |   |     |_TERM
          |   |       |_FACTOR
          |   |         |_v
          |   |_)
          |-;
          |_EOF
Entering PROGRAM
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering B
Exiting B
Entering DECLAREEXP
Entering b
Exiting b
Entering <<
Exiting <<
Entering BEXP
Entering True
Exiting True
Exiting True
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering B
Exiting B
Entering DECLAREEXP
Entering notb
Exiting notb
Entering <<
Exiting <<
Entering BEXP
Entering !
Exiting !
Entering (
Entering BEXP
Entering True
Exiting True
Exiting True
Entering )
Exiting !
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering N
Exiting N
Entering DECLAREEXP
Entering a
Exiting a
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting 3
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering DECLARATION
Entering B
Exiting B
Entering DECLAREEXP
Entering v
Exiting v
Entering <<
Exiting <<
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering b
Exiting b
Exiting b
Exiting b
Exiting b
Exiting b
Entering &
Exiting &
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering notb
Exiting notb
Exiting notb
Exiting notb
Exiting notb
Exiting notb
Entering X
Exiting X
Entering BEXP
Entering True
Exiting True
Exiting True
Exiting X
Entering )
Exiting X
Exiting X
Exiting X
Exiting X
Entering &
Exiting &
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering 2
Exiting 2
Exiting 2
Exiting 2
Exiting 2
Entering =
Exiting =
Entering EXP
Entering TERM
Entering FACTOR
Entering a
Exiting a
Exiting a
Exiting a
Exiting a
Exiting =
Exiting =
Exiting &
Exiting &
Exiting <<
Exiting DECLARATION
Exiting DECLARATION
Entering ;
Entering INSTRUCTIONLIST
Entering INSTRUCTION
Entering ON
Entering On
Exiting On
Entering .
Entering Console
Exiting Console
Entering (
Entering BEXP
Entering CEXP
Entering EXP
Entering TERM
Entering FACTOR
Entering v
Exiting v
Exiting v
Exiting v
Exiting v
Exiting v
Exiting v
Entering )
Exiting On
Exiting On
Entering ;
Entering EOF
Exiting On
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
Exiting INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-B
| |_<<
|   |-b
|   |_True
|_INSTRUCTIONLIST
  |-DECLARATION
  | |-B
  | |_<<
  |   |-notb
  |   |_!
  |     |_True
  |_INSTRUCTIONLIST
    |-DECLARATION
    | |-N
    | |_<<
    |   |-a
    |   |_3
    |_INSTRUCTIONLIST
      |-DECLARATION
      | |-B
      | |_<<
      |   |-v
      |   |_&
      |     |-b
      |     |_&
      |       |-X
      |       | |-notb
      |       | |_True
      |       |_=
      |         |-2
      |         |_a
      |_On
        |-Console
        |_v
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of B
Optimization start B
End Optimization of B
Optimization of <<
Optimization of b
Optimization start b
End Optimization of b
Optimization of True
Optimization start True
End Optimization of True
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of B
Optimization start B
End Optimization of B
Optimization of <<
Optimization of notb
Optimization start notb
End Optimization of notb
Optimization of !
Optimization of True
Optimization start True
End Optimization of True
Optimization start !
Optimization result False
End Optimization of False
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of N
Optimization start N
End Optimization of N
Optimization of <<
Optimization of a
Optimization start a
End Optimization of a
Optimization of 3
Optimization start 3
End Optimization of 3
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of INSTRUCTIONLIST
Optimization of DECLARATION
Optimization of B
Optimization start B
End Optimization of B
Optimization of <<
Optimization of v
Optimization start v
End Optimization of v
Optimization of &
Optimization of b
Optimization start b
End Optimization of b
Optimization of &
Optimization of X
Optimization of notb
Optimization start notb
End Optimization of notb
Optimization of True
Optimization start True
End Optimization of True
Optimization start X
Optimization result X
End Optimization of X
Optimization of =
Optimization of 2
Optimization start 2
End Optimization of 2
Optimization of a
Optimization start a
End Optimization of a
Optimization start =
Optimization result =
End Optimization of =
Optimization start &
Optimization result &
End Optimization of &
Optimization start &
Optimization result &
End Optimization of &
Optimization start <<
End Optimization of <<
Optimization start DECLARATION
End Optimization of DECLARATION
Optimization of On
Optimization of Console
Optimization start Console
End Optimization of Console
Optimization of v
Optimization start v
End Optimization of v
Optimization start On
End Optimization of On
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
Optimization start INSTRUCTIONLIST
End Optimization of INSTRUCTIONLIST
INSTRUCTIONLIST
|-DECLARATION
| |-B
| |_<<
|   |-b
|   |_True
|_INSTRUCTIONLIST
  |-DECLARATION
  | |-B
  | |_<<
  |   |-notb
  |   |_False
  |_INSTRUCTIONLIST
    |-DECLARATION
    | |-N
    | |_<<
    |   |-a
    |   |_3
    |_INSTRUCTIONLIST
      |-DECLARATION
      | |-B
      | |_<<
      |   |-v
      |   |_&
      |     |-b
      |     |_&
      |       |-X
      |       | |-notb
      |       | |_True
      |       |_=
      |         |-2
      |         |_a
      |_On
        |-Console
        |_v
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 15 	 | DECLARATION 	 | b
| 15 	 | DECLARATION 	 | notb
| 12 	 | DECLARATION 	 | a
| 15 	 | DECLARATION 	 | v
		mov eax, TRUE
		mov dword[b], eax

	b : dd 0
		mov eax, FALSE
		mov dword[notb], eax

	notb : dd 0
		mov eax, 3
		mov dword[a], eax

	a : dd 0
t1	t2 : dd 0
		mov eax, dword[notb]
		mov ebx, dword[t1]
		xor eax,ebx
		cmp eax, TRUE
		je t2_true
		mov dword[t2], FALSE
		jmp t2_false
		t2_true:
		mov dword[t2],TRUE
		t2_false:
	t3 : dd 2
		mov eax, dword[t3]
		mov eax, dword[a]
	t4 : dd 0
		cmp eax, ebx
		je	t4_true
		mov dword[t4],FALSE
		jmp t4_false
		t4_true:
		mov dword[t4],TRUE
		t4_false:

	t5 : dd 0
		mov eax, dword[t4]
		mov ebx, dword[t3]
		and eax,ebx
		cmp eax, TRUE
		je t5_true
		mov dword[t5], FALSE
		jmp t5_false
		t5_true:
		mov dword[t5],TRUE
		t5_false:
	t6 : dd 0
		mov eax, dword[b]
		mov ebx, dword[t5]
		and eax,ebx
		cmp eax, TRUE
		je t6_true
		mov dword[t6], FALSE
		jmp t6_false
		t6_true:
		mov dword[t6],TRUE
		t6_false:
		mov eax, dword[t6]
		mov dword[v], eax

	v : dd 0
		mov eax, dword[v]
		cmp eax, 0
		je t7_false
		push stringTrue
		jmp t7_true
		t7_false:
		push stringFalse
		t7_true:
		push formatoutbool; push message into ESP
		call _printf; call defined function
		add esp, 8; params * 4

Object File Created : nasm -f win32 C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.asm
Exe File Created : gcc C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.obj -o C:\Users\Alex\Documents\GitHub\compilerProject\Compiler\..\Examples\AttributionAndWriteExample.exe
| Symbol | Scope 	 | Name
| 1000 	 | INSTRUCTIONLIST 	 | TABLE
| 15 	 | DECLARATION 	 | b
| 15 	 | DECLARATION 	 | notb
| 12 	 | DECLARATION 	 | a
| 15 	 | DECLARATION 	 | v
| 17 	 | INSTRUCTIONLIST 	 | stringFalse
| 17 	 | INSTRUCTIONLIST 	 | stringTrue
| 17 	 | INSTRUCTIONLIST 	 | formatoutnumber
| 17 	 | INSTRUCTIONLIST 	 | formatoutdecimal
| 17 	 | INSTRUCTIONLIST 	 | formatoutchar
| 17 	 | INSTRUCTIONLIST 	 | formatoutstring
| 17 	 | INSTRUCTIONLIST 	 | formatoutbool
| 17 	 | INSTRUCTIONLIST 	 | formatinnumber
| 17 	 | INSTRUCTIONLIST 	 | formatindecimal
| 17 	 | INSTRUCTIONLIST 	 | formatinchar
| 17 	 | INSTRUCTIONLIST 	 | formatinstring
| 17 	 | INSTRUCTIONLIST 	 | formatinbool
| 15 	 | X 	 | t1
| 15 	 | X 	 | t2
| 12 	 | = 	 | t3
| 15 	 | = 	 | t4
| 15 	 | & 	 | t5
| 15 	 | & 	 | t6
